#! /usr/bin/python

# Copyright 2014-2015 University of Chicago
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import print_function

import argparse
import datetime
import grp
import os
import re
import socket
import sys

sys.path.append(os.path.join(
        os.path.dirname(sys.argv[0]),
        "..",
        "share",
        "python"))

import repo
import repo.advisories
import repo.deb
import repo.packages
import repo.installers
import repo.yum
import repo.zypper

parser = argparse.ArgumentParser(
        description="Promote a package to a more stable release point")
parser.add_argument(
    "-r", "--root",
    help="Synchronize packages to the ROOT directory ["
            + repo.default_root + "]",
    default=repo.default_root)
parser.add_argument(
    "-p", "--package",
    help="Only sync the latest version of PACKAGE [all new packages]")
parser.add_argument(
    "-f", "--from",
    help="Copy packages from the FROM release [unstable]",
    dest="from_release",
    choices=["unstable", "testing"],
    default="unstable")
parser.add_argument(
    "-t", "--to",
    help="Copy packages to the TO release [testing]",
    choices=["testing", "stable"],
    dest="to_release",
    default="testing")
parser.add_argument(
    "-o", "--os-name",
    help="Only process packages related to the OS_NAME. The name should be of the form os/release for an RPM distro (e.g. el/5 or sles/11) or a codename for a Deb distro (e.g. wheezy)",
    dest="os_name",
    default=None)
parser.add_argument(
    "-x", "--exclude-os-name",
    help="Do not process packages related to the OS_NAME. The OS_NAME string should be a comma-separated list of OSes to exclude. The form of the OS names are os/release for an RPM distro (e.g. el/5 or sles/11) or a codename for a Deb distro (e.g. wheezy)",
    dest="exclude_os_name",
    default=None)
parser.add_argument(
    "-X", "--exclude-package-names",
    help="Do not process packages that have names that match EXCLUDE_PACKAGE_NAMES.",
    dest="exclude_package_names",
    default=None)
parser.add_argument(
    "-d", "--dryrun",
    help="Display packages that would be copied, but don't actually execute the copy",
    action='store_true')
parser.add_argument(
    "-a", "--advisory",
    help="Add new package changelogs to the ADVISORY file",
    default=None)
parser.add_argument(
    "-j", "--json",
    help="Add new package changelogs to the JSON file",
    default=None)

args = parser.parse_args()
os_name = None
exclude_os_names = ["el/5", "fedora/19", "fedora/20", "fedora/21", "fedora/22", "fedofra/23", "precise", "squeeze", "lucid", "utopic", "vivid", "wily", "sles/11"]
exclude_package_names = [".*mod-gridftp.*", "globus-gridftp-server-google.*"]

if args.os_name is not None:
    os_name = [args.os_name]
if args.exclude_os_name is not None:
    exclude_os_names.extend(args.exclude_os_name.split(","))
if args.exclude_package_names is not None:
    exclude_package_names.extend(args.exclude_package_names.split(","))

if socket.gethostname() == 'globuscvs':
    gid = grp.getgrnam('globdev').gr_gid
    if os.getgid() != gid:
        print("Run newgrp globdev before running this script")
        exit(1)
    os.umask(0o2)
    repo.gid = gid

repo.setup_gpg_agent()

releases = [args.from_release, args.to_release]

print("====================")
print("Parsing repositories")
print("====================")

pkg_managers = dict()
print("Parsing deb")
pkg_managers['deb'] = \
    repo.deb.Manager(root=args.root, releases=releases, os_names=os_name, exclude_os_names=exclude_os_names)
print("Parsing yum")
pkg_managers['yum'] = \
    repo.yum.Manager(root=args.root, releases=releases, os_names=os_name, exclude_os_names=exclude_os_names)
print("Parsing zypper")
pkg_managers['zypper'] = \
    repo.zypper.Manager(root=args.root, releases=releases, os_names=os_name, exclude_os_names=exclude_os_names)

pdict = dict()
advisories = None
if args.advisory is not None:
    advpath = args.advisory
    if advpath == "-":
        advpath = None
    advisories = repo.advisories.Advisories(
            initial_advisories_path=advpath, format="txt")

elif args.json is not None:
    advisories = repo.advisories.Advisories(
            initial_advisories_path=args.json, format="json")
today = datetime.datetime.now().strftime("%Y-%m-%d")

print("==================")
print("Promoting packages")
print("==================")
for man in pkg_managers:
    print("Promoting %s packages" % man)
    manager = pkg_managers[man]
    packages = manager.promote_packages(
            name=args.package, from_release=args.from_release,
            to_release=args.to_release, dryrun=args.dryrun, exclude_package_names=exclude_package_names)

    for p in packages:
        pkey = "-".join([p.name, p.version.strversion])
        if pkey not in pdict:
            pdict[pkey] = set()
        pdict[pkey].add(p.os)

    if advisories is not None:
        advisories.add_advisories(packages)

if args.to_release == 'stable':
    gcs_packages = [(p) for p in pdict.keys() \
            if p.startswith('globus-connect-server')]

    if len(gcs_packages) > 0:
        packages_manager = repo.packages.Manager(root=args.root)
        packages_manager.get_release('stable').repositories_for_package(None)[0].update_gcs_version_file()


if args.dryrun:
    print("====================")
    print("Promotion candidates")
    print("====================")
    for p in pdict.keys():
        print(p, " to [", ", ".join(pdict[p]), "]")

if args.package is None:
    print("=============================")
    print("Parsing installers repository")
    print("=============================")
    manager = repo.installers.Manager(
            root=args.root)
    if not args.dryrun:
        print("====================")
        print("Promoting installers")
        print("====================")
    installers = manager.promote_packages(from_release=args.from_release,
            to_release=args.to_release, dryrun=args.dryrun)
    if args.dryrun and len(installers) > 0:
        print("==============================")
        print("Installer Promotion candidates")
        print("==============================")
        print("\n".join([(os.path.basename(p.path) + " to " + p.os) for p in installers]))

if advisories is not None:
    if args.dryrun or args.advisory == '-':
        print(advisories.new_to_text(), end=' ')
    elif args.advisory is not None:
        f = open(args.advisory, "a")
        f.write(advisories.new_to_text())
        f.close()
    elif args.json is not None:
        f = open(args.json, "w")
        f.write("advisories = " + advisories.to_json() + ";")
        f.close()

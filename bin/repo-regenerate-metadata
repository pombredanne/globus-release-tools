#! /usr/bin/python

# Copyright 2014-2015 University of Chicago
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import print_function

import argparse
import datetime
import grp
import os
import re
import socket
import sys

sys.path.append(os.path.join(
        os.path.dirname(sys.argv[0]),
        "..",
        "share",
        "python"))

import repo
import repo.deb
import repo.packages
import repo.installers
import repo.yum
import repo.zypper

parser = argparse.ArgumentParser(
        description="Regenerate repository metadata for a releast")
parser.add_argument(
    "-r", "--root",
    help="Process metadata in the ROOT directory ["
            + repo.default_root + "]",
    default=repo.default_root)
parser.add_argument(
    "-R", "--release",
    help="Process release",
    choices=["unstable", "testing", "stable"],
    default="stable")
parser.add_argument(
    "-t", "--type",
    help="Process repository type TYPE",
    choices=["deb", "yum", "zypper"],
    default=None)

args = parser.parse_args()

if socket.gethostname() == 'globuscvs':
    gid = grp.getgrnam('globdev').gr_gid
    if os.getgid() != gid:
        print("Run newgrp globdev before running this script")
        exit(1)
    os.umask(0o2)
    repo.gid = gid

repo.setup_gpg_agent()

print("====================")
print("Parsing repositories")
print("====================")

pkg_managers = dict()
if args.type == 'deb':
    print("Parsing deb")
    pkg_managers['deb'] = repo.deb.Manager(
        root=args.root, releases=[args.release])
if args.type == 'yum':
    print("Parsing yum")
    pkg_managers['yum'] = repo.yum.Manager(
        root=args.root, releases=[args.releases])
if args.type == 'zypper':
    print("Parsing zypper")
    pkg_managers['zypper'] = repo.zypper.Manager(
        root=args.root, releases=[args.release])

pdict = dict()
advisories = {}
today = datetime.datetime.now().strftime("%Y-%m-%d")

print("=================")
print("Updating metadata")
print("=================")
for man in pkg_managers:
    manager = pkg_managers[man]
    manager.get_release(args.release).update_metadata(force=True)
